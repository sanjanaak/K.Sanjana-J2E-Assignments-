Bit Manipulation & Greedy Assignment


PROBLEM-1

public class FruitSlicing {
    public static int countSlices(int[] A) {
        HashSet<Integer> distinctWeights = new HashSet<>();

        for (int fruitWeight : A) {
            distinctWeights.add(fruitWeight);
        }

        return distinctWeights.size();
    }

}

PROBLEM-2


class Solution {
    public int coinChange(int[] coins, int amount) {
        int[]dp=new int[amount+1];
        Arrays.fill(dp,amount+1);
        dp[0]=0;
        for(int c:coins){
            for(int i=c;i<=amount;i++){
                dp[i]=Math.min(dp[i],dp[i-c]+1);
            }
        }
        return dp[amount]<=amount ? dp[amount] : -1;
    }
}

PROBLEM-3

import java.util.Scanner;
import java.util.Vector;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

            int n = scanner.nextInt();
            Vector<Long> a = new Vector<>();
            long mn = Integer.MAX_VALUE;
            for (int i = 0; i < n; i++) {
                long num = scanner.nextLong();
                a.add(num);
                mn = Math.min(mn, num);
            }
            long ans = 0;
            for (int i = 0; i < n; i++) {
                ans += a.get(i) - mn;
            }
            System.out.println(ans);

    }
}


PROBLEM-4


public class MinimumPillsToSurvive {
    public static int minPillsToSurvive(int N, int V, int[] a) {
        int pillsTaken = 0;
        int health = V;

        for (int i = 0; i < N; i++) {
            if (health <= 0) {
                break; 
            }

            if (a[i] > 1 && health <= 1) {

                pillsTaken++;
                health = a[i] - 1;
            } else if (a[i] > health) {

                pillsTaken++;
                health = a[i];
            }

            health--;
        }

        return pillsTaken;
    }
}


PROBLEM-5

class Solution
{


public static List<List<Integer> >
	solve(List<Integer> v)
{


	Set<List<Integer> > res = new HashSet<>();
	List<Integer> subset = new ArrayList<>();
	List<List<Integer> > result = new ArrayList<>();


	res.add(subset);


	for (int i = 0; i < v.size(); i++) {
	int N = res.size();
	for (List<Integer> it : res) {

		subset = new ArrayList<>(it);
		subset.add(v.get(i));
		result.add(subset);
		N--;
		if (N == 0) {
		break;
		}
	}
	res.addAll(result);
	result.clear();
	}

	return new ArrayList<>(res);
}}


PROBLEM-6

class Solution {
    public int singleNumber(int[] nums) {
        int ans=0; 
        for(int i=0; i<nums.length; i++){
            ans ^= nums[i];  
        }
        return ans;    
    }
}


PROBLEM-7


class Solution {

	static int minXOR(int arr[], int n)
	{
		int min_xor = Integer.MAX_VALUE; // Initialize result


		for (int i = 0; i < n; i++)
			for (int j = i + 1; j < n; j++)


				min_xor = Math.min(min_xor, arr[i] ^ arr[j]);

		return min_xor;
	}
}



PROBLEM-8


class Solution {
    public int singleNumber(int[] nums) {
        int ans=0; 
        for(int i=0; i<nums.length; i++){
            ans ^= nums[i];  
        }
        return ans;    
    }
}


PROBLEM-9

import java.io.*;

class Solution{
	static int hammingDistance(int x, int y)
{
	int ans = 0;
	int m = Math.max(x, y);
	while (m>0) {
		int c1 = x & 1;
		int c2 = y & 1;
		if (c1 != c2)
			ans += 1;
		m = m >> 1;
		x = x >> 1;
		y = y >> 1;
	}
	return ans;
}

}

PROBLEM-10

import java.io.*;

class Solution{

	public static int reverseBits(int n)
	{
		int rev = 0;


		while (n > 0) {

			rev <<= 1;
			if ((int)(n & 1) == 1)
				rev ^= 1;
			n >>= 1;
		}

		return rev;
	}
}



