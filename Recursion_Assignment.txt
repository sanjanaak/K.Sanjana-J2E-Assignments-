RECURSION ASSIGNMENT 

PROBLEM-1

public class Main {
    public static void printKLengthString(char set[], String sequence, int n, int k) {
        if (k == 0) {
            System.out.print(sequence + "\t");
            return;
        }
        for (int i = 0; i < n; i++) {
            String newSequence = sequence + set[i];
            printKLengthString(set, newSequence, n, k - 1);
        }
    }
}

PROBLEM-2

import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int m = scanner.nextInt();

        int n = scanner.nextInt();
        int a = m + n - 2;
        int b = m - 1;
        double r = 1;
        for (int i = 1; i <= b; i++) {
            r = r * (a - b + i) / i;
        }
        System.out.println((int) r);

    }
}



PROBLEM-3

class Solution {

    private ListNode temp;
    private boolean isStop;

    public void reorderList(ListNode head) {
        temp = head;
        isStop = false;
        reorder(head);
    }

    private void reorder(ListNode head) {
        if (head == null) return;
        reorder(head.next);

        if (!isStop) {
            ListNode next = temp.next;
            temp.next = head;
            head.next = next;
            temp = next;
        }

        if (temp != null && temp.next == head) {
            temp.next = null;
            isStop = true;
        }
    }
}


PROBLEM-4

class Hanoi
{
void solve(int n, int src, int des, int helper){
if(n==1){
cout<<"Moving disc 1 from "<<src<<" to" << des<<endl;
return;
}
solve(n-1, src, helper, des);
cout<<"Moving disc "<<n<<"from "<<1<<" to "<<des<<endl;
solve(n-1, helper, des, src);
return;
}
}

PROBLEM -5

class Solution{
Map<Integer , List<TreeNode>> map = new HashMap<>();
public List<TreeNode> allPossibleFBT(int n) {

    if(!map.containsKey(n)){
        List<TreeNode> res = new ArrayList<>();

        if(n == 1){
            res.add(new TreeNode(0,null,null));
        } else {
            for(int i = 1 ; i < n ; i += 2){
                List<TreeNode> leftSubtree = allPossibleFBT(i);
                List<TreeNode> rightSubtree = allPossibleFBT(n - i - 1);

                for(TreeNode left : leftSubtree){
                    for(TreeNode right : rightSubtree){
                        res.add(new TreeNode(0,left,right));
                    }
                }
            }
        }
        map.put(n , res);
    }

    return map.get(n);
}
}

PROBLEM-6


import java.io.*;

class Solution {


	static void subsetSums(int[] arr, int l, int r, int sum)
	{


		if (l > r) {
			System.out.print(sum + " ");
			return;
		}


		subsetSums(arr, l + 1, r, sum + arr[l]);


		subsetSums(arr, l + 1, r, sum);
	}
}


PROBLEM -7

class Solution {


	static int max(int a, int b) { return (a > b) ? a : b; }


	static int knapSackRec(int W, int wt[], int val[],
						int n, int[][] dp)
	{


		if (n == 0 || W == 0)
			return 0;

		if (dp[n][W] != -1)
			return dp[n][W];

		if (wt[n - 1] > W)


			return dp[n][W]= knapSackRec(W, wt, val, n - 1, dp);

		else


			return dp[n][W]= max((val[n - 1]+ knapSackRec(W - wt[n - 1], wt, val,n - 1, dp)),
		 knapSackRec(W, wt, val, n - 1, dp));
	}

	static int knapSack(int W, int wt[], int val[], int N)
	{


		int dp[][] = new int[N + 1][W + 1];


		for (int i = 0; i < N + 1; i++)
			for (int j = 0; j < W + 1; j++)
				dp[i][j] = -1;

		return knapSackRec(W, wt, val, N, dp);
	}

}

PROBLEM-8

class Solution {
    public List<List<String>> partition(String s) {
        List<String>p=new ArrayList<>();
        List<List<String>>ll=new ArrayList<>();
fun(0,s,p,ll);
return ll;
 }
 public static void fun (int i,String s,List<String>p,List<List<String>>ll)
 {
     if(i==s.length())
     {
         ll.add(new ArrayList<>(p));
         return ;
     }
     for(int j=i;j<s.length();j++){
    if(pal(s,i,j))
    {
        p.add(s.substring(i,j+1));

    fun(j+1,s,p,ll);
    p.remove(p.size()-1);
    }
 }
 }
 public static boolean pal(String s,int st,int e){

 while(st<=e)
 {
     if(s.charAt(st++)!=s.charAt(e--)){
         return false;
     }


 }
     return true;
 }
}








