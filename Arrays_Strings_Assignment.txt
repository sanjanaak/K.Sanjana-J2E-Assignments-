ARRAY ASSIGNMENT

PROBLEM-1

class Solution {
    public List<Boolean> kidsWithCandies(int[] candies, int extraCandies) {
        int m=0;
        for(int i=0;i<candies.length;i++){
if(m<candies[i]){
    m=candies[i];
}}
List<Boolean>a=new ArrayList<>();
for(int i=0;i<candies.length;i++){
    if(candies[i]+extraCandies>=m){
        a.add(true);
    }
    else{
        a.add(false);
    }

        }
        return a;

    }
}



PROBLEM-2

class Solution {
    public int maxArea(int[] height) {
        int i=0; int j=height.length-1;
        int ans = 0;
        while(i < j){
            ans = Math.max(ans,Math.min(height[i],height[j])*(j-i));
            if(height[i]<height[j])i++;
            else if(height[i]>height[j])j--;
            else {
                i++;
                j--;
            }
        }
        return ans;
    }
}

PROBLEM-3


class Solution {
    public int threeSumClosest(int[] nums, int target) {
        Arrays.sort(nums);
        int closestSum = Integer.MAX_VALUE;
        for(int i=0;i<nums.length-2;i++){
            int left = i+1;
            int right = nums.length-1;
            while(left<right){
                int sum = nums[i]+nums[left]+nums[right];
                if(Math.abs(target-sum)<Math.abs(target-closestSum))
                    closestSum = sum;
                else if(target<sum)
                    right--;
                else left++;
            }
        }
        return closestSum;
    }
}



PROBLEM-4

class Solution {
    public void nextPermutation(int[] nums) {
        int i=nums.length-2;
        if(nums==null||nums.length<=1)
        {
            return;
        }
        while(i>=0 && nums[i]>=nums[i+1])

            i--;


      if(i>=0)
        {  int j=nums.length-1;
            while(nums[j]<=nums[i])

              j--;
              swap(nums,i,j);

        }
        reverse(nums,i+1,nums.length-1);
    }
        public static void swap(int nums[],int i,int j)
        {
            int t=nums[i];
            nums[i]=nums[j];
          nums[j]=t;
        }
        public static void reverse(int nums[],int i,int j)
        {
            while(i<j)
            {
                swap(nums,i++,j--);
            }


    }
}


PROBLEM-5


class Solution {
    public int search(int[] nums, int target) {
        int low=0,high=nums.length-1;
        return binarySearch(nums,low,high,target);
    }
    public int binarySearch(int[] nums,int low,int high,int target){
        int mid=(low+high)/2,left=-1,right=-1;
        if(low<=high){
            if(nums[mid]==target)
                return mid;
            else{
                left=binarySearch(nums,low,mid-1,target);
                right=binarySearch(nums,mid+1,high,target);
            }
        }
        return Math.max(left,right);
    }
}


PROBLEM-6

class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        Arrays.sort(nums);
List<Integer>l=new ArrayList<>();
int b[]=new int[nums.length];
List<List<Integer>>ll=new ArrayList<>();
permuteunique(nums,l,ll,b);
return ll;

    }
    public static void permuteunique(int[] nums,List<Integer>l,List<List<Integer>>ll,int[] b){
        if(nums.length==l.size()){

            ll.add(new ArrayList<>(l));
            return ;
        }
        for(int i=0;i<nums.length;i++){
            if(b[i]==0){
                l.add(nums[i]);
                b[i]=1;
                permuteunique(nums,l,ll,b);
                b[i]=0;
                l.remove(l.size()-1);

            while(i+1<nums.length && nums[i]==nums[i+1]){
                i++;
            }}
        }
    }
}


PROBLEM-7

class Solution {
    public int maxSubArray(int[] nums) {
        int s=0;
        int m=Integer.MIN_VALUE;
        for(int i=0;i<nums.length;i++)
        {
            s=s+nums[i];

            if(s>m)
            {
                m=s;
            }
            if(s<0)
            {
                s=0;

            }

        }
        return m;

    }
}


PROBLEM-8

class Solution {
    public int[][] merge(int[][] intervals) {
        List<int[]>l=new ArrayList<>();
         Arrays.sort(intervals,(a,b)->a[0]-b[0]);
        int s=intervals[0][0];
        int e=intervals[0][1];

        for(int []i:intervals)
        {

                if(e>=i[0])
                {
                e=Math.max(e,i[1]);

            }

            else{

               l.add(new int[]{s,e});
                s=i[0];
                e=i[1];




            }

        }
         l.add(new int[]{s,e});

       return l.toArray(new int[0][]);


    }
}


PROBLEM-9

class Solution {
    public void sortColors(int[] nums) {
       int l=0;
       int m=0;
       int h=nums.length-1;
       int t;
       while(m<=h)
       {
           switch(nums[m])
           {
               case 0:{
           t=nums[l];
               nums[l]=nums[m];
               nums[m]=t;
               l++;
               m++;
               break;
               }
               case 1:{
               m++;
               break;}
               case 2:
               {
               t=nums[m];
               nums[m]=nums[h];
               nums[h]=t;
               h--;
               break;}
           }
       }

        System.out.print(nums.toString());
    }
}

PROBLEM -10

class Solution {
    public int maxProfit(int[] prices) {
        int profit = 0;
        return maxProfitDp(0, prices, prices.length, profit);
    }
    public int maxProfitDp(int startInx, int arr[], int endingInx, int profit){
        int minValue=Integer.MAX_VALUE;
        int maxProfit=0;

        for(int i=startInx; i<endingInx; i++){
            if(arr[i]<minValue)
                minValue=arr[i];
            else if(arr[i]-minValue>maxProfit){
                maxProfit=arr[i]-minValue;
                profit=(maxProfit + profit)>profit ? (maxProfit + profit) : profit;
                return maxProfitDp(i, arr, endingInx, profit);
            }
        }
        return profit;
    }
}

PROBLEM-11

class Solution {
    public int findPeakElement(int[] nums) {
        int s=0;
        int e=nums.length-1;
        while(s<e)
        {
            int m=s+(e-s)/2;
            if(nums[m]<nums[m+1])
            {
                s=m+1;
            }
            else{
                e=m;
            }
        }
        return s;
    }

}

PROBLEM-12

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int n1 = nums1.length;
        int n2 = nums2.length;
        int n = n1 + n2;
        int[] new_arr = new int[n];

        int i=0, j=0, k=0;

        while (i<=n1 && j<=n2) {
            if (i == n1) {
                while(j<n2) new_arr[k++] = nums2[j++];
                break;
            } else if (j == n2) {
                while (i<n1) new_arr[k++] = nums1[i++];
                break;
            }

            if (nums1[i] < nums2[j]) {
                new_arr[k++] = nums1[i++];
            } else {
                new_arr[k++] = nums2[j++];
            }
        }

        if (n%2==0) return (float)(new_arr[n/2-1] + new_arr[n/2])/2;
        else return new_arr[n/2];
    }
}


PROBLEM-13

class Solution {
    public int maxArea(int[] height) {
        int l=0;
        int r=height.length-1;
        int m=0;
        while(l<r)
        {
            int w=r-l;
            int h=Math.min(height[l],height[r]);
            int a=w*h;
            m=Math.max(m,a);
            if(height[l]<height[r])
            {
                l++;
            }
            else if(height[l]>height[r])
            {
                r--;
            }
            else{
l++;
            r--;}
        }
        return m;

    }
}

PROBLEM-14

class Solution {
    public int findMaxConsecutiveOnes(int[] nums) {
        int c=0;
        int mi=0;

        for(int i=0;i<nums.length;i++)
        {
if(nums[i]==0)
{
    c=0;
}
        else{
            c=c+1;
        }
             mi=Math.max(c,mi);

        }

        return mi;
    }
}


PROBLEM-15

class Solution {
    public int findKthLargest(int[] nums, int k) {

       PriorityQueue<Integer>p=new PriorityQueue<>();
       for(int i:nums)
       {
           p.add(i);


       if(p.size()>k)
       {
           p.remove();
       }
       }
        return p.peek();
       }  

        }






